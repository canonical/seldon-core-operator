# reusable workflow triggered by other actions
name: CI

on:
  workflow_call:
    secrets:
      CHARMCRAFT_CREDENTIALS:
        required: true

jobs:
  lib-check:
    name: Check libraries
    uses: canonical/charmed-kubeflow-workflows/.github/workflows/_quality-checks.yaml@main
    secrets: inherit
    with:
        charm-path: "."

  lint:
    name: Lint Check
    runs-on: ubuntu-20.04

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Install dependencies
      run: sudo apt-get install python3-pip tox

    - name: Lint code
      run: tox -e lint

  unit:
    name: Unit Test
    runs-on: ubuntu-20.04

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Install dependencies
      run: sudo apt-get install python3-pip tox

    - name: Run unit tests
      run: tox -e unit

  integration:
    name: Integration Test (build and deploy)
    runs-on: [self-hosted, linux, X64, two-xlarge]
    strategy:
      matrix:
        tox-environments:
          - charm-integration
          - seldon-servers-integration
    steps:
    - name: Check out repo
      uses: actions/checkout@v2

    - name: Parse and enable DNS server
      id: dns-name
      run: |
        dns_server=$(grep -oPm1 'Current DNS Server: \K[^\s]+' <<< "$(resolvectl status)")
        echo "Using following DNS Server: $dns_server"

        echo "MY_ADDONS=hostpath-storage ingress dns:$dns_server rbac registry metallb:'10.64.140.43-10.64.140.49,192.168.0.105-192.168.0.111'" >> $GITHUB_OUTPUT

    - name: Setup aproxy
      run: |
        sudo snap install aproxy --edge
        sudo snap set aproxy proxy=squid.internal:3128
        sudo nft -f - << EOF
        define default-ip = $(ip route get $(ip route show 0.0.0.0/0 | grep -oP 'via \K\S+') | grep -oP 'src \K\S+')
        define private-ips = { 10.0.0.0/8, 127.0.0.1/8, 172.16.0.0/12, 192.168.0.0/16 }
        table ip aproxy
        flush table ip aproxy
        table ip aproxy {
              chain prerouting {
                      type nat hook prerouting priority dstnat; policy accept;
                      ip daddr != \$private-ips tcp dport { 80, 443 } counter dnat to \$default-ip:8443
              }

              chain output {
                      type nat hook output priority -100; policy accept;
                      ip daddr != \$private-ips tcp dport { 80, 443 } counter dnat to \$default-ip:8443
              }
        }
        EOF

    - name: Setup Python 3.8
      run: |
        echo "deb-src http://archive.ubuntu.com/ubuntu/ jammy main" | sudo tee -a /etc/apt/sources.list

        sudo apt-get update -yqq
        sudo apt-get build-dep -yqq python3
        sudo apt-get install -yqq pkg-config

        sudo apt-get install -yqq build-essential gdb lcov pkg-config \
          libbz2-dev libffi-dev libgdbm-dev libgdbm-compat-dev liblzma-dev \
          libncurses5-dev libreadline6-dev libsqlite3-dev libssl-dev \
          lzma lzma-dev tk-dev uuid-dev zlib1g-dev

        curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash

        export PYENV_ROOT="$HOME/.pyenv"
        command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"

        pyenv install 3.8.16
        pyenv global 3.8.16

        # configure environment variables to be available in subsequent steps
        echo "PYENV_ROOT=$PYENV_ROOT" >> "$GITHUB_ENV"
        echo "PATH=$PATH" >> "$GITHUB_ENV"

    - name: Install tox
      run: |
        eval "$(pyenv init -)"
        pip install tox

    - name: Setup operator environment
      uses: charmed-kubernetes/actions-operator@main
      with:
        provider: microk8s
        channel: 1.25-strict/stable
        microk8s-addons: ${{ steps.dns-name.outputs.MY_ADDONS }}
        juju-channel: 3.1/stable
        charmcraft-channel: latest/candidate

    - name: Run integration tests
      run: |
        eval "$(pyenv init -)"
        tox -ve ${{ matrix.tox-environments }} -- --model testing

    # On failure, capture debugging resources
    - name: Get all
      run: kubectl get all -A
      if: failure()

    - name: Get juju status
      run: juju status
      if: failure()

    - name: Get workload logs
      run: kubectl logs --tail 100 -ntesting -lapp.kubernetes.io/name=seldon-controller-manager
      if: failure()

    - name: Get operator logs
      run: kubectl logs --tail 100 -ntesting -loperator.juju.is/name=seldon-controller-manager
      if: failure()
